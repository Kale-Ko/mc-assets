name: Update Files

on:
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch:

jobs:
  update-files:
    name: Update Files
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write

    concurrency:
      group: update-files-group
      cancel-in-progress: false

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 2147483647

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24"
          check-latest: true

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global credential.helper store
          echo "https://Kale-Ko:${{secrets.GITHUB_TOKEN }}@github.com" > ~/.git-credentials

      - name: Get Time
        id: get-time
        run: |
          echo "time=$(date -u '+%s.%N')" >> $GITHUB_OUTPUT

      - name: Download Last Hash Cache
        id: download-last-hash-cache
        uses: actions/cache/restore@v4
        with:
          path: last-hash
          key: last-hash-cache-${{ steps.get-time.outputs.time }}
          restore-keys: |
            last-hash-cache-
            last-hash-cache

      - name: Check For Updates
        id: check-for-updates
        run: |
          currentHash=$(curl -sSL https://piston-meta.mojang.com/mc/game/version_manifest_v2.json | sha256sum | awk '{ print $1 }')
          lastHash=$(cat last-hash || echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
          if [[ "$currentHash" != "$lastHash" ]]; then
            echo "needsUpdate=true" >> $GITHUB_OUTPUT
          else
            echo "needsUpdate=false" >> $GITHUB_OUTPUT
          fi
          echo "$currentHash" > last-hash

      - name: Install Fuse
        run: |
          sudo apt-get install -y fuse3 bindfs
        if: ${{ steps.check-for-updates.outputs.needsUpdate == 'true' }}

      - name: Download Full Cache
        id: download-full-cache
        uses: actions/cache/restore@v4
        with:
          path: cache/
          key: full-cache-${{ steps.get-time.outputs.time }}
          restore-keys: |
            full-cache-
            full-cache
        if: ${{ steps.check-for-updates.outputs.needsUpdate == 'true' }}

      - name: Install Dependencies
        run: bun install
        if: ${{ steps.check-for-updates.outputs.needsUpdate == 'true' }}

      - name: Run Restore
        run: bun run restore
        if: ${{ steps.check-for-updates.outputs.needsUpdate == 'true' }}

      - name: Run Test
        run: bun run test
        if: ${{ steps.check-for-updates.outputs.needsUpdate == 'true' }}

      - name: Run README
        run: |
          bun run readme
          (git add README.md && git commit -m "Update README" && git push) || true

          git fetch --no-tags --prune --no-recurse-submodules --depth=2147483647 origin +refs/heads/dev*:refs/remotes/origin/dev* +refs/tags/dev*:refs/tags/dev*
          git checkout --progress --force -B dev refs/remotes/origin/dev
          git rebase dev
        if: ${{ steps.check-for-updates.outputs.needsUpdate == 'true' }}

      - name: Run Output
        run: bun run output --create-restore
        if: ${{ steps.check-for-updates.outputs.needsUpdate == 'true' }}

      - name: Run Git
        run: bun run git
        if: ${{ steps.check-for-updates.outputs.needsUpdate == 'true' }}

      - name: Upload Full Cache
        id: upload-full-cache
        uses: actions/cache/save@v4
        with:
          path: cache/
          key: ${{ steps.download-full-cache.outputs.cache-primary-key }}
        if: ${{ steps.check-for-updates.outputs.needsUpdate == 'true' && steps.download-full-cache.outcome == 'success' }}

      - name: Upload Last Hash Cache
        id: upload-last-hash-cache
        uses: actions/cache/save@v4
        with:
          path: last-hash
          key: ${{ steps.download-last-hash-cache.outputs.cache-primary-key }}
        if: ${{ steps.download-last-hash-cache.outcome == 'success' }}

      - name: Clear Old Last Hash Caches
        run: |
          # Feast your eyes on this absolute beauty curtesy of sheer will power and lack of sleep
          gh config clear-cache
          (gh cache list --key last-hash-cache --limit 100 --sort created_at --order desc --json id,key,createdAt | jq --argjson now "$(date -u +%s)" '. | map(select((.createdAt | sub("\\..*"; "") | strptime("%Y-%m-%dT%H:%M:%S") | mktime) < ($now - 43200))) | .[1:][].id' | xargs -i gh cache delete '{}') || true
        env:
          GH_TOKEN: ${{ github.token }}
        if: ${{ steps.download-last-hash-cache.outcome == 'success' && steps.upload-last-hash-cache.outcome == 'success' }}
